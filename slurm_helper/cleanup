#!/bin/bash

REQUESTNAME="$1"

export LD_LIBRARY_PATH="/$REPLAY_USER/slurm-replay/distime:$LD_LIBRARY_PATH"
REPLAY_LIB="LD_PRELOAD=libwtime.so"

# cleanup job
if [[ ! -z "$REQUESTNAME" ]]; then
    out=$(eval "$REPLAY_LIB squeue -h --name $REQUESTNAME")
    if [[ ! -z "$out" ]]; then
       output_cancel="|Found jobs: $out"
       eval "$REPLAY_LIB scancel --name $REQUESTNAME" > /dev/null 2>&1
       output_cancel="$output_cancel|Canceling jobs return $?"
       sleep 2
    fi
fi

# cleanup reservation
if [[ ! -z "$REQUESTNAME" ]]; then
   eval "$REPLAY_LIB scontrol show res $REQUESTNAME" > /dev/null 2>&1
   if [[ $? -eq 0 ]]; then
      output_res="|Found reservation: ${REQUESTNAME}"
      eval "$REPLAY_LIB scontrol -Q delete reservation=${REQUESTNAME}"
      if [[ $? -ne 0 ]]; then
         output_res="$output_res|Reservation ${REQUESTNAME} not removed."
      else
         output_res="$output_res|Reservation ${REQUESTNAME} removed."
      fi
      sleep 2
   fi
fi

# weird jobs restart slurmctld
#out=$(eval "$REPLAY_LIB squeue -h -o '%r' | grep -e 'ReqNodeNotAvail' -e 'Nodes required for job are DOWN'")
out=""
if [[ ! -z "$out" ]]; then
    job_count=$(eval "$REPLAY_LIB squeue -h -o '%r' | grep -e 'ReqNodeNotAvail' -e 'Nodes required for job are DOWN' | wc -l")
    output_jobstate="|Found $job_count jobs in bad state: $out|Restarting slurmctld."
    eval "$REPLAY_LIB slurmctld"
    if [[ $? -ne 0 ]]; then
        output_jobstate="$output_jobstate|Restarting slurmctld failed."
    else
        sleep 1
        out=$(eval "$REPLAY_LIB scontrol update partition=normal state=up")
        if [[ ! -z "$out" ]]; then
            output_jobstate="$output_jobstate|Failed to set partition normal to up."
        fi
    fi
    sleep 1
fi

echo "${output_res}${output_cancel}${output_jobstate}"
exit 0

